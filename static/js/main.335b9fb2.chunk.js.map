{"version":3,"sources":["components/CounterJS.js","components/CounterReactJS.js","components/WindowSizeJS.js","components/WindowSizeReactJS.js","App.js","serviceWorker.js","index.js"],"names":["CounterJS","id","for","type","onClick","document","getElementById","innerText","parseInt","value","CounterReactJS","incrementCounter","setState","prevState","hits","state","this","React","Component","WindowSizeJS","refreshSize","window","innerHeight","innerWidth","onload","WindowSizeReactJS","height","width","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAkBeA,G,MAhBG,WAMd,OACI,6BACQ,0BAAMC,GAAG,aAAT,KACA,2BAAOC,IAAI,OAAOD,GAAG,aAArB,YAEA,2BAAOE,KAAK,SAASC,QATjC,WACIC,SAASC,eAAe,aAAaC,UAAYC,SAASH,SAASC,eAAe,aAAaC,WAAa,GAQpDE,MAAM,c,mCCuBvDC,E,YAhCX,aAAe,IAAD,8BACV,+CAOJC,iBAAmB,WAEf,EAAKC,UAAU,SAACC,GAER,MAAO,CACPC,KAAMD,EAAUC,KAAO,OAX/B,EAAKC,MAAQ,CACTD,KAAK,GAHC,E,sEAqBV,OACI,6BACI,2BAAOZ,IAAI,aAAcc,KAAKD,MAAMD,KAAO,SAC3C,2BAAOX,KAAK,SAASC,QAASY,KAAKL,iBAAkBF,MAAM,gB,GA1B9CQ,IAAMC,WCsBpBC,EAtBM,WAEjB,SAASC,IACLf,SAASC,eAAe,gBAAgBC,UAAYc,OAAOC,YAC3DjB,SAASC,eAAe,eAAeC,UAAYc,OAAOE,WAK9D,OAFAF,OAAOG,OAASJ,EAGR,sCACY,0BAAMnB,GAAG,iBADrB,eAGW,0BAAMA,GAAG,gBAEhB,2BAAOE,KAAK,SAASM,MAAM,UAAUL,QAASgB,MCuB/CK,E,YApCX,aAAe,IAAD,8BACV,+CAQJL,YAAc,WAEV,EAAKR,UAAU,WAEP,MAAO,CACHc,OAAOL,OAAOC,YACdK,MAAMN,OAAOE,gBAbzB,EAAKR,MAAQ,CACTW,OAAOL,OAAOC,YACdK,MAAMN,OAAOE,YAJP,E,sEAuBV,OACI,6BACI,2BAAOrB,IAAI,UAAW,WAAac,KAAKD,MAAMW,QADlD,OAGI,2BAAOxB,IAAI,SAAS,UAAYc,KAAKD,MAAMY,OAC3C,2BAAOxB,KAAK,SAASC,QAASY,KAAKI,YAAaX,MAAM,iB,GA9BtCQ,IAAMC,WCuBvBU,MAlBf,WACE,OACE,6BACE,iEACA,kBAAC,EAAD,MACA,6BACA,4FACA,kBAAC,EAAD,MACA,6BACA,qEACA,kBAAC,EAAD,MACA,6BACA,gGACA,kBAAC,EAAD,Q,MCRcC,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS7B,SAASC,eAAe,SD2H3C,kBAAmB6B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.335b9fb2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CounterJS = () =>{\r\n\r\n    function incrementCounter() {\r\n        document.getElementById(\"hitsCount\").innerText = parseInt(document.getElementById(\"hitsCount\").innerText) + 1\r\n    }\r\n\r\n    return (\r\n        <div>\r\n                <span id=\"hitsCount\">0</span>\r\n                <label for=\"hits\" id=\"hitsLabel\">&nbsp;hits</label>\r\n                {/*Below onClick event Handler is specific to react. In pure JS, we would use onclick=\"incrementcounter()\"*/}\r\n                <input type=\"button\" onClick={incrementCounter} value=\"Hit me\"></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CounterJS","import React from 'react';\r\n\r\nclass CounterReactJS extends React.Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            hits:0\r\n        }\r\n      \r\n    }\r\n\r\n    incrementCounter = () => {\r\n\r\n        this.setState( (prevState) =>\r\n            { \r\n                return {\r\n                hits: prevState.hits + 1\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <label for=\"hitsCount\" >{this.state.hits + \" hits\"}</label>\r\n                <input type=\"button\" onClick={this.incrementCounter} value=\"Hit me\"></input>\r\n            </div>\r\n            \r\n            )       \r\n    }\r\n\r\n}\r\n\r\nexport default CounterReactJS","import React from 'react';\r\n\r\nconst WindowSizeJS = () => {\r\n\r\n    function refreshSize() {\r\n        document.getElementById(\"windowHeight\").innerText = window.innerHeight;\r\n        document.getElementById(\"windowWidth\").innerText = window.innerWidth;\r\n    }\r\n\r\n    window.onload = refreshSize;\r\n    \r\n    return (\r\n            <p>\r\n                Height: <span id=\"windowHeight\"></span>\r\n                &nbsp;\r\n                Width: <span id=\"windowWidth\"></span>\r\n                {/*Below onClick event Handler is specific to react. In pure JS, we would use onclick=\"refreshSize()\"*/}\r\n                <input type=\"button\" value=\"Refresh\" onClick={refreshSize}></input>\r\n            </p>\r\n    )\r\n    \r\n\r\n}\r\n\r\nexport default WindowSizeJS","import React from 'react';\r\n\r\nclass WindowSizeReactJS extends React.Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            height:window.innerHeight,\r\n            width:window.innerWidth\r\n        }\r\n      \r\n    }\r\n\r\n    refreshSize = () => {\r\n\r\n        this.setState( () =>\r\n            { \r\n                return {\r\n                    height:window.innerHeight,\r\n                    width:window.innerWidth\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <label for=\"height\" >{\"Height: \" + this.state.height}</label>\r\n                &nbsp;\r\n                <label for=\"width\">{\"Width: \" + this.state.width}</label>\r\n                <input type=\"button\" onClick={this.refreshSize} value=\"Refresh\"></input>\r\n            </div>\r\n            \r\n            )       \r\n    }\r\n\r\n}\r\n\r\nexport default WindowSizeReactJS","import React from 'react';\r\nimport './App.css';\r\nimport CounterJS from './components/CounterJS';\r\nimport CounterReactJS from './components/CounterReactJS';\r\nimport WindowSizeJS from './components/WindowSizeJS';\r\nimport WindowSizeReactJS from './components/WindowSizeReactJS';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <h3>Counter in React class component:</h3>\r\n      <CounterReactJS />\r\n      <br/>\r\n      <h3>Counter in vanilla JavaScript in React functional component:</h3>\r\n      <CounterJS />\r\n      <br/>\r\n      <h3>Window size in React class component:</h3> \r\n      <WindowSizeReactJS />\r\n      <br/>\r\n      <h3>Window size in vanilla JavaScript in React functional component:</h3> \r\n      <WindowSizeJS />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.js';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}